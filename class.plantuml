@startuml

title 7Physics

package 7Physics {
    class MainFrame {
    
    }

    class GUI {
        + {static} getInstance(): GUI
        - GUI()
        + close()
    }

    class ObjectListPanel

    class EnvPanel

    GUI o-- "1" ObjectListPanel: contentBottomPanelLeft
    GUI o-- "1" EnvPanel: ongletsBottom
}

package Engine {
    class World {
        - gravityEnabled: boolean
        + World()
        - doCollisions(po: PhysicObject, index: int)
        - doCollisions(a: PhysicObject, b: PhysicObject): Vec3
    }

    class PhysicObject {
        + PhysicObject(Shape shape, Position position, seedInit: Vec3)
        + update(time: double)
        + addForce(f: Vec3)
        + calculatePosition(time: double): Position
        + calculateSpeed(time: double): Vec3
    }

    World o--"*" PhysicObject: physicObjects
    World --> Vec3: gravity
}

PhysicObject --> Vec3: speed
PhysicObject o--"*" Vec3: forces
PhysicObject *-- "1" Position
PhysicObject *-- "1" Shape

package Renderer {
    class Scene3D {
        - glu: GLU
        - fpsAnimator: FPSAnimator
        + Scene3D(camera: Camera, ground: Ground)
        + startAnimation()
        + init(drawable: GLAutoDrawable)
        + display(drawable: GLAutoDrawable)
        + iterator(): Iterator<Object3D>
    }

    interface Renderable {
        + render(gl: GL2)
    }

    class Object3D {
        - color: Color
        + render(gl: GL2)
        + Object3D(position: Position, shape: Shape, color: Color, edgeColor: Color)
        + Object3D(position: Position, shape: Shape)
    }

    class Ground {
        - width: double
        - lineGap: double
        + Ground(width: double, lineGap: double)
        + render(gl: GL2)
    }

    class Camera {
        - fov: double
        + zoom()
        + dezoom()
        + moveForward(offset: double)
        + moveBackward(offset: double)
        + moveRight(offset: double)
        + moveLeft(offset: double)
        + getLookAt(): Vec3
        + rotateVertical(angleRadians: double)
        + rotateHorizontal(angleRadians: double)
    }

    class SceneKeyListener {
        + SceneKeyListener(scene: Scene3D)
        + update()
    }

    class SceneMouseListener {
        + SceneMouseListener(scene: Scene3D)
    }

    Object3D "*" --o Scene3D
    Renderable <|.. Object3D
    Renderable <|.. Ground
    Scene3D o--"*" Renderable: renderables
    Scene3D --> "1" Camera: camera
    Scene3D - SceneKeyListener
    SceneMouseListener - Scene3D
    SceneKeyListener --> "1" Camera

}

package Common {
    class Position {
        - horizontalAngle: double
        - verticalAngle: double
        + Position(x: double, y: double, z: double, horizontalAngle: double, verticalAngle: double)
        + translate(translation: Vec3)
        + rotate(hAngle: double, vAngle: double)
        + clone(): Position
    }

    class Shape {
        + Shape()
        + Shape(vertices: List<Vec3>)
        # addSquare(a: Vec3, b: Vec3, c: Vec3, d: Vec3)
    }

    class Vec3 {
        - x: double
        - y: double
        - z: double
        + Vec3(x: double, y: double, z: double)
        + multiply(other: Vec3): Vec3
        + minus(other: Vec3): Vec3
        + add(vec3: Vec3): Vec3
        + scale(factor: double): Vec3
        + clone(): Vec3
    }

    class Logger {
        + warn(warning: String)
        + debug(debug: String)
        + error(error: String)
        + info(info: String)
    }

    class Cuboid {
        + Cuboid(width: double, length: double, height: double)
    }

    class Pyramid {
        + Pyramid(width: double, length: double, height: double)
        + Pyramid(side: double, height: double)
    }
    abstract RoundedFace {
        # pointOnCircle(pointOnSquare : Vec3, radius: double): Vec3
        # findMiddle(a: Vec3, b:Vec3): Vec3
    }

    class Sphere {
        - radius: double
        + Sphere(radius: double, nbIt:int)
        # pointOnCircle(pointOnCube : Vec3, radius: double): Vec3
        - findPoints(a: Vec3, b: Vec3, c: Vec3, d: Vec3, nbIt: int): List<Vec3>
    }

    class Cylinder {
        + Cylinder(radius: double, height: double)
        - findPoints(a: Vec3, b: Vec3, e: Vec3, f: Vec3, nbIt: int): List<Vec3>
    }

    class Cone {
        + Cone(radius: double, height: double)
        - findPoints(a: Vec3, b: Vec3, nbIt: int): List<Vec3>
    }

    class BoundingBox {
        - minX: double
        - maxX: double
        - minY: double
        - maxY: double
        - minZ: double
        - maxZ: double
        + BoundingBox(minX: double, maxX: double, minY: double, maxY: double, minZ: double, maxZ: double)
        + addPoint(point: Vec3)
        + intersect(other BonndingBox): boolean
        + containsPoint(point: Vec3): boolean
        + translate(translation: Vec3): BoundingBox
        + clone(): Vec3
    }

    interface Positionnable {

    }

    Position o- "*" Vec3: coords
    Shape "*" o- Vec3: vertices
    BoundingBox "1"--* Shape
    Shape  <|-- Cuboid
    Shape  <|-- Pyramid
    Shape  <|-- RoundedFace
    RoundedFace  <|-- Sphere
    RoundedFace  <|-- Cone
    RoundedFace  <|-- Cylinder

}

interface Cloneable

MainFrame --> World
MainFrame --> Scene3D
Scene3D -> World
Object3D --> "1" Shape: shape
Object3D --> "1" Position: position
Scene3D --> "1" Position: cameraPosition
Camera --> "1" Position: position
Vec3 --|> Cloneable
BoundingBox -|> Cloneable
Position --|> Cloneable
@enduml